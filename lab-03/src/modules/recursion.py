# recursion.py
def factorial(n):
    """
    Вычисляет факториал положительного целого числа n рекурсивно.
    Аргументы:
        n: положительное целое число, для которого вычисляется факториал.
    Возвращает:
        n!, если n >= 1; -1 для некорректных (неположительных) аргументов.
    """
    if n == 1:
        return 1
    elif n > 1:
        return n * factorial(n-1)
    else:
        return -1

# Временная сложность: O(n)
# Глубина рекурсии: n


def fibbonachi(n):
    """
    Вычисляет n-ое число Фибоначчи рекурсивно.
    Аргументы:
        n: целое число (индекс) — позиция числа Фибоначчи в последовательности.
    Возвращает:
        n-ое число Фибоначчи
        -1 для некорректных (неположительных) аргументов.
    """
    if n > 0 and n < 3:
        return 1
    elif n > 2:
        return fibbonachi(n-1) + fibbonachi(n-2)
    else:
        return -1

# Временная сложность: O(2^n)
# Глубина рекурсии: n


def quick_power(val, p):
    """
    Быстрое возведение в степень (возведение val в целую степень p) рекурсивно.
    Аргументы:
        val: число — основание степени.
        p: целое число — показатель степени.
    Возвращает:
        val**p как результат возведения в степень.
    """
    if p < 0:
        return quick_power(1/val, -p)
    if p == 0:
        return 1
    if p % 2 == 0:
        return quick_power(val*val, p/2)
    else:
        return val*quick_power(val*val, (p-1)/2)

# Временная сложность: O(log p)
# Глубина рекурсии: log₂|p| (по основанию 2)
